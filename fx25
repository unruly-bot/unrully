import React, { useEffect, useState, useRef } from 'react';
import axios from 'axios';

const TradingViewWidget = () => {
  const [signal, setSignal] = useState(null);
  const [rate, setRate] = useState(null);
  const [log, setLog] = useState([]);
  const audioRef = useRef(null);

  useEffect(() => {
    const script = document.createElement('script');
    script.src = 'https://s3.tradingview.com/tv.js';
    script.async = true;
    script.onload = () => {
      new window.TradingView.widget({
        container_id: 'tradingview_chart',
        autosize: true,
        symbol: 'FX:USDJPY',
        interval: '15',
        timezone: 'Etc/UTC',
        theme: 'dark',
        style: '1',
        locale: 'en',
        toolbar_bg: '#f1f3f6',
        enable_publishing: false,
        hide_top_toolbar: false,
        save_image: false,
        studies: ['MACD@tv-basicstudies', 'RSI@tv-basicstudies'],
        withdateranges: true,
        details: true,
        hotlist: true,
        calendar: true,
        show_popup_button: true,
        popup_width: '1000',
        popup_height: '650'
      });
    };
    document.body.appendChild(script);
  }, []);

  useEffect(() => {
    const fetchSignal = async () => {
      try {
        const response = await axios.get('http://localhost:4000/signal');
        const { signal, rate } = response.data;
        setRate(rate);
        if (signal) {
          setSignal(signal);
          setLog(prev => [{ time: new Date().toLocaleTimeString(), ...signal }, ...prev]);
          if (audioRef.current) audioRef.current.play();
        }
      } catch (error) {
        console.error('Failed to fetch signal:', error);
      }
    };

    fetchSignal();
    const interval = setInterval(fetchSignal, 10000); // every 10 seconds
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="w-full h-screen p-2 bg-gray-900 text-white relative">
      <audio ref={audioRef} src="https://assets.mixkit.co/sfx/preview/mixkit-positive-interface-beep-221.mp3" preload="auto" />

      {/* TradingView Chart */}
      <div className="w-full h-[70%] mb-4 relative">
        <div id="tradingview_chart" className="w-full h-full rounded-xl overflow-hidden" />

        {signal && (
          <div
            className={`absolute top-4 right-4 px-4 py-2 rounded-xl text-xl font-bold shadow-xl animate-bounce z-50 ${signal.type === 'buy' ? 'bg-green-600' : 'bg-red-600'}`}
          >
            {signal.type === 'buy' ? 'â¬† BUY' : 'â¬‡ SELL'} @ {signal.price}
          </div>
        )}
      </div>

      {/* Price & Alert */}
      <div className="mb-2 text-lg">
        <strong>Live USD/JPY:</strong> {rate}
      </div>

      {signal && (
        <div className={`p-3 mb-4 rounded-xl text-center font-bold ${signal.type === 'buy' ? 'bg-green-600' : 'bg-red-600'}`}>
          {signal.type.toUpperCase()} Signal @ {signal.price}
        </div>
      )}

      {/* Signal Log */}
      <div className="bg-gray-800 rounded-xl p-4 max-h-[25%] overflow-y-auto">
        <h2 className="text-xl mb-2 font-semibold">ðŸ“‹ Signal Log</h2>
        <ul className="space-y-1">
          {log.map((entry, index) => (
            <li key={index} className="text-sm">
              [{entry.time}] {entry.type.toUpperCase()} @ {entry.price}
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default TradingViewWidget;
